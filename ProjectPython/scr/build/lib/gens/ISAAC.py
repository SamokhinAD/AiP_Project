def f(a,i):
    """
    Выполняет побитовые операции с параметром `a` в зависимости от значения `i`.

    :param a: Целое число, с которым проводятся операции.
    :type a: int
    :param i: Индекс, определяющий тип операции.
    :type i: int
    :return: Результат сдвига влево или вправо в зависимости от значения `i % 4`.
    :rtype: int

    Операции:
    - `i % 4 == 0`: Сдвиг влево на 13 бит.
    - `i % 4 == 1`: Сдвиг вправо на 6 бит.
    - `i % 4 == 2`: Сдвиг влево на 2 бита.
    - `i % 4 == 3`: Сдвиг вправо на 16 бит.
    """
    #по рекомендациям создателя:
    p0 = 13
    p1 = 6
    p2 = 2
    p3 = 16
    if i%4 == 0:
        return a<<p0
    if i%4 == 1:
        return a>>p1
    if i%4 == 2:
        return a<<p2
    if i%4 == 3:
        return a>>p3

def isaac_generator():
    """
    Генератор псевдослучайных чисел на основе алгоритма ISAAC.

    Алгоритм:
    - Инициализирует массивы `z` (выходные значения) и `s` (состояние) размером `2^n`.
    - Использует три регистра (`a`, `b`, `c`) для хранения промежуточных данных.
    - Выполняет побитовые операции с использованием функции `f()` и обновляет состояние `s`.

    :yield: Следующее псевдослучайное число.
    :rtype: int

    Примечания:
    - Размер массива `s` определяется параметром `n` (в данном случае `n = 20`).
    - Генерация чисел завершается, когда индекс `i` достигает размера массива `s`.
    """
    n = 20 
    #степень числа 2 выбрана высокой для универсальности использования 
    #при любом размере внешнего запроса на количество генерируемых чисел
    
    z = [0]*(2**n)
    s = []
    for i in range(2**n):
        s.append(i)
    a,b,c = 0,0,0

    c += 1
    b += c
    i = 0
    while i < 2**n-1:
        yield b
        x = s[i]
        a = f(a,i) + s[(i + 128) % (2**n)]
        s[i] = a + b + s[(x>>2)%(2**n)]
        z[i] = x + s[(s[i]>>10)%(2**n)]
        b = z[i]
        i += 1