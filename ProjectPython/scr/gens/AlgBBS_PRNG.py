from math import *
from gens.LCM import *

def preferences(ind):
    """
    Определяет два подходящих простых числа `p` и `q` для дальнейших вычислений.

    :param ind: Индекс простого числа, от которого зависит выбор `p` и `q`.
    :type ind: int

    :return: Кортеж из двух простых чисел `(p, q)`.
    :rtype: tuple[int, int]

    Алгоритм:
    - Создает список простых чисел, удовлетворяющих критериям:
      - Число `i` из последовательности `[3, 7, 11, ...]` (шаг 4).
      - Число больше `3 * 10^6` и не имеет делителей, кроме 1 и самого себя.
    - Возвращает пару чисел `p` и `q`, где:
      - gcd(p, q) < 1000, то есть НОД этих чисел должен быть сравнительно мал.
      - `p` и `q` различны, если это возможно, иначе возвращаются одинаковые числа.
    """
    prime = []
    for i in range(3,10**8,4):
        if i > 3*10**6 and all(i%x != 0 for x in range(2,int(i**0.5)+1)):
            prime.append(i)
            if len(prime) == 1000:
                break
    for i in range(len(prime)):
        if gcd(prime[ind], prime[i]) < 1000 and prime[ind] != prime[i]:
            p: int = prime[i]
            break
        else:
            p: int = prime[ind]
    q: int = prime[ind]
    return p,q

m: int = 2_147_483_648
a: int = 594_156_893
c: int = 75_692
seed: int = 123_456_789
gen = linear_congruential_generator(m, a, c, seed)

def bbs_generator():
    """
    Генератор псевдослучайных чисел на основе алгоритма Blum Blum Shub (BBS).

    Алгоритм использует квадратичное сравнение для генерации случайных чисел:
    `x = (x^2) % (p * q)`, где `p` и `q` — большие простые числа.

    :yield: Следующее псевдослучайное число в последовательности.
    :rtype: int

    Примечания:
    - Начальное значение (`seed`) и параметры `p` и `q` выбираются следующим образом:
      - `seed` генерируется с помощью линейного конгруэнтного генератора (`linear_congruential_generator`), где:
        - `m`: Модуль.
        - `a`: Множитель.
        - `c`: Приращение.
        - `seed`: Начальное значение (seed).
      - Простые числа `p` и `q` выбираются через функцию `preferences`.
    - Генератор является бесконечным, и для получения следующего значения используется `next()`.
    """
    seed: int = next(gen)
    x = seed
    p: int = 0
    p,q = preferences(next(gen)%10)
    while True:
        yield x
        x = (x**2) % (p*q)